{"version":3,"sources":["components/card-reveal/style.module.scss","serviceWorker.ts","api/index.ts","pages/start.tsx","services/local-session-storage.ts","utils/index.ts","services/local-user-storage.ts","components/poker-card/poker-card.tsx","components/dev-sign-in/dev-sign-in.tsx","components/dev-estimation/dev-estimation.tsx","pages/developer.tsx","components/card-reveal/card-reveal.tsx","components/votes-table/votes-table.tsx","components/estimations/estimations.tsx","pages/po-page.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","ApiService","db_name","db","this","PouchDB","process","console","log","info","data","post","sessionId","get","document","last_updated","Date","getTime","put","getSession","then","session","remove","_id","_rev","estimationId","estimations","userInfo","vote","getEstimation","estimation","votes","id","timestamp","value","pattern","voter_username","username","voter_email","email","updateEstimation","newEstimation","uuid","refDocument","Object","keys","reduce","next","currentEstKey","isActive","callback","changes","since","live","on","change","_instance","FormField","LocalSessionApi","currentSessions","getSessions","localStorage","setItem","JSON","stringify","length","sessionsString","getItem","parse","sessions","filter","result","Start","api","Instance","state","form","session_name","session_pin","previousSessions","onFormSubmit","formData","setState","valid","current","newSession","created_at","response","ok","saveSession","props","history","push","onInputChange","event","currentTarget","name","onPreviousSessionDelete","stopPropagation","delete","finally","deleteSession","onSessionLinkClick","Segment","raised","Grid","columns","stackable","Column","verticalAlign","Header","textAlign","Form","onSubmit","e","Input","required","fluid","icon","iconPosition","label","placeholder","onChange","className","Button","type","primary","List","divided","map","Item","as","key","onClick","Content","floated","Icon","Description","t","toLocaleDateString","toLocaleTimeString","timeFormat","Divider","vertical","React","withRouter","LocalUserInfoApi","userInfoValue","PokerCard","onSelect","voteValue","side","withProfilePic","size","voterEmail","voterUsername","style","backgroundImage","voterPattern","children","Dimmer","active","loading","Loader","defaultProps","DevSignIn","patternOptions","text","image","src","onUserInfoFormSubmit","userInfoForm","saveUserInfo","onUserSign","onSelectChange","Row","width","Field","Dropdown","labeled","selection","options","DevEstimation","cardValues","onActiveEstimationChange","setActiveEstimation","activeEstimation","onCardSelected","acc","currentEstimation","undefined","currentSelectedVote","sessionName","Group","secondary","padded","color","description","DeveloperPage","onUserSignIn","params","URLSearchParams","search","getUserInfo","sessionValid","catch","error","initialLoad","main","inverted","content","CardReveal","Reveal","disabled","shouldHide","animated","pointerEvents","container","instant","lineHeight","visible","hidden","VotesTable","onToggleVoteClick","newEstimate","estimate","documentRef","onDeleteClick","deleteEstimation","SegmentGroup","circular","negative","voteKey","Estimations","mapEstimationsToPanes","sort","a","b","estimationKeys","index","menuItem","render","Tab","Pane","rev","initialRender","menu","pointing","panes","PoPage","onEstimationFormInputChange","estimationForm","onEstimationFormSubmit","estimation_name","createNewEstimation","estimation_description","isEnded","onCopyButtonClick","devSessionUrl","origin","navigator","clipboard","writeText","toast","success","position","POSITION","BOTTOM_RIGHT","estimationsComponent","clearing","autoClose","particlesJS","load","App","basename","path","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f05438e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__1Hz1V\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import PouchDB from \"pouchdb\";\r\nimport {ISessionDb, IEstimation} from \"./interfaces\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport {IUserInfo} from \"../services\";\r\n\r\nexport class ApiService {\r\n  readonly db_name = \"sessions\";\r\n  private db: PouchDB.Database<ISessionDb>;\r\n\r\n  private constructor() {\r\n    this.db = new PouchDB(`${process.env.REACT_APP_API}${this.db_name}`, {});\r\n    console.log(\"API SERVICE\", process.env.REACT_APP_API);\r\n  }\r\n\r\n  info() {\r\n    return this.db.info();\r\n  }\r\n\r\n  post(data: Partial<ISessionDb>) {\r\n    return this.db.post(data);\r\n  }\r\n\r\n  getSession(sessionId: string) {\r\n    return this.db.get(sessionId);\r\n  }\r\n\r\n  update(document: PouchDB.Core.PutDocument<ISessionDb>) {\r\n    document.last_updated = new Date().getTime();\r\n    return this.db.put(document);\r\n  }\r\n\r\n  delete(sessionId: string) {\r\n    return this.getSession(sessionId).then((session) => {\r\n      return this.db.remove({_id: sessionId, _rev: session._rev});\r\n    });\r\n  }\r\n\r\n  getEstimation(sessionId: string, estimationId: string) {\r\n    return this.db.get(sessionId).then((session) => {\r\n      return [session.estimations?.[estimationId], session];\r\n    });\r\n  }\r\n\r\n  vote(\r\n    sessionId: string,\r\n    estimationId: string,\r\n    userInfo: IUserInfo,\r\n    vote?: string\r\n  ) {\r\n    this.getEstimation(sessionId, estimationId).then(\r\n      ([estimation, session]: [\r\n        IEstimation,\r\n        ISessionDb & PouchDB.Core.IdMeta & PouchDB.Core.GetMeta\r\n      ]) => {\r\n        if ((!vote && !estimation.votes[userInfo.id]) || vote) {\r\n          estimation.votes[userInfo.id] = {\r\n            id: userInfo.id,\r\n            timestamp: new Date().getTime(),\r\n            value: vote,\r\n            pattern: userInfo.pattern,\r\n            voter_username: userInfo.username,\r\n            voter_email: userInfo.email,\r\n          };\r\n          this.updateEstimation(\r\n            {_id: session._id, _rev: session._rev},\r\n            estimation\r\n          );\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  createNewEstimation(\r\n    document: PouchDB.Core.PutDocument<ISessionDb>,\r\n    newEstimation: Partial<IEstimation>\r\n  ) {\r\n    const id = uuid();\r\n    const estimations = document.estimations ?? {};\r\n    estimations[id] = {...newEstimation, id} as any;\r\n    document.estimations = estimations;\r\n\r\n    return this.db.put(document);\r\n  }\r\n\r\n  updateEstimation(\r\n    refDocument: PouchDB.Core.PutDocument<ISessionDb>,\r\n    estimation: IEstimation\r\n  ) {\r\n    if (refDocument._id && refDocument._rev) {\r\n      this.db.get(refDocument._id).then((document) => {\r\n        if (document.estimations) {\r\n          //set all other to inactive\r\n          document.estimations = Object.keys(document.estimations).reduce(\r\n            (next, currentEstKey) => {\r\n              if (next[currentEstKey].id === estimation.id) {\r\n                next[currentEstKey] = estimation;\r\n              } else {\r\n                if (estimation.isActive) {\r\n                  next[currentEstKey].isActive = false;\r\n                }\r\n              }\r\n              return next;\r\n            },\r\n            document.estimations\r\n          );\r\n        } else {\r\n          document.estimations = {[estimation.id!]: estimation};\r\n        }\r\n        return this.db.put(document);\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteEstimation(\r\n    refDocument: PouchDB.Core.PutDocument<ISessionDb>,\r\n    estimationId: string\r\n  ) {\r\n    this.db.get(refDocument._id!).then((document) => {\r\n      if (document.estimations) {\r\n        delete document.estimations[estimationId];\r\n        this.db.put(document);\r\n      }\r\n    });\r\n  }\r\n\r\n  onChange(\r\n    callback: (change?: PouchDB.Core.ChangesResponseChange<ISessionDb>) => any\r\n  ) {\r\n    this.db\r\n      .changes({\r\n        since: \"now\",\r\n        live: true,\r\n      })\r\n      .on(\"change\", (change) => {\r\n        callback(change);\r\n      });\r\n  }\r\n\r\n  // Singleton set up\r\n  private static _instance: ApiService;\r\n  public static get Instance() {\r\n    return this._instance || (this._instance = new this());\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  Segment,\r\n  Grid,\r\n  Divider,\r\n  List,\r\n  Header,\r\n} from \"semantic-ui-react\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\n\r\nimport {ApiService} from \"../api\";\r\nimport \"./start.scss\";\r\nimport {LocalSessionApi, ISessionAccess} from \"../services/local-session-storage\";\r\nimport {timeFormat} from \"../utils\";\r\n\r\nexport interface IStartProps extends RouteComponentProps {}\r\n\r\nexport interface IStartState {\r\n  form: IForm;\r\n  valid?: IForm;\r\n  previousSessions: ISessionAccess[] | null;\r\n}\r\n\r\ninterface IForm {\r\n  session_name: string;\r\n  session_pin: string;\r\n  [key: string]: string;\r\n}\r\n\r\nenum FormField {\r\n  session_name = \"session_name\",\r\n  session_pin = \"session_pin\",\r\n}\r\n\r\nclass Start extends React.Component<IStartProps, IStartState> {\r\n  api: ApiService = ApiService.Instance;\r\n\r\n  state: IStartState = {\r\n    form: {\r\n      session_name: \"\",\r\n      session_pin: \"\",\r\n    },\r\n\r\n    previousSessions: LocalSessionApi.getSessions(),\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.api.info().then((data) => {\r\n      console.log(\"info\", data);\r\n    });\r\n  }\r\n\r\n  onFormSubmit = (formData: IForm) => {\r\n    this.setState({\r\n      valid: Object.keys(formData).reduce((next: any, current) => {\r\n        next[current] = formData[current] !== \"\" ? \"valid\" : \"invalid\";\r\n        return next;\r\n      }, {}) as IForm,\r\n    });\r\n    if (formData.session_name !== \"\" && formData.session_pin !== \"\") {\r\n      const newSession = {...formData, ...{created_at: new Date().getTime()}};\r\n      this.api.post(newSession).then((response) => {\r\n        if (response.ok) {\r\n          LocalSessionApi.saveSession({\r\n            _id: response.id,\r\n            session_name: formData.session_name,\r\n            session_pin: formData.session_pin,\r\n            created_at: newSession.created_at,\r\n          });\r\n          this.props.history.push(`/po?id=${response.id}`);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const form = {\r\n      ...this.state.form,\r\n      ...{[event.currentTarget.name]: event.currentTarget.value},\r\n    };\r\n\r\n    this.setState({form});\r\n  };\r\n\r\n  onPreviousSessionDelete = (event: React.MouseEvent, sessionId: string) => {\r\n    event.stopPropagation();\r\n    this.api.delete(sessionId).finally(() => {\r\n      LocalSessionApi.deleteSession(sessionId);\r\n      this.setState({previousSessions: LocalSessionApi.getSessions()});\r\n    });\r\n  };\r\n\r\n  onSessionLinkClick = (sessionId: string) => {\r\n    this.props.history.push(`/po?id=${sessionId}`);\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <div id=\"start-page\">\r\n        <Segment raised>\r\n          <Grid columns= {2} stackable>\r\n            <Grid.Column verticalAlign=\"middle\">\r\n              <Header textAlign=\"center\">New Session</Header>\r\n              <Form\r\n                onSubmit={(e) => {\r\n                  this.onFormSubmit(this.state.form);\r\n                }}\r\n              >\r\n                <Form.Input\r\n                  required\r\n                  fluid\r\n                  icon=\"clock outline\"\r\n                  iconPosition=\"left\"\r\n                  name={FormField.session_name}\r\n                  value={this.state.form.session_name}\r\n                  label=\"Session Name\"\r\n                  placeholder=\"Session Name\"\r\n                  onChange={this.onInputChange}\r\n                  className={this.state.valid?.session_name}\r\n                />\r\n                <Form.Input\r\n                  required\r\n                  fluid\r\n                  icon=\"lock\"\r\n                  iconPosition=\"left\"\r\n                  name={FormField.session_pin}\r\n                  value={this.state.form.session_pin}\r\n                  label=\"Session PIN\"\r\n                  placeholder=\"Session PIN\"\r\n                  onChange={this.onInputChange}\r\n                  className={this.state.valid?.session_pin}\r\n                />\r\n                <Button type=\"submit\" primary>\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Grid.Column>\r\n            <Grid.Column verticalAlign=\"top\">\r\n              <Header textAlign=\"center\">Recent Sessions</Header>\r\n              <List divided verticalAlign=\"middle\">\r\n                {this.state.previousSessions?.length ? (\r\n                  this.state.previousSessions?.map((session) => {\r\n                    return (\r\n                      <List.Item\r\n                        as=\"a\"\r\n                        key={session._id}\r\n                        onClick={() => {\r\n                          this.onSessionLinkClick(session._id);\r\n                        }}\r\n                      >\r\n                        <List.Content floated=\"right\">\r\n                          <Button\r\n                            icon=\"times circle outline\"\r\n                            onClick={(e) => {\r\n                              this.onPreviousSessionDelete(e, session._id);\r\n                            }}\r\n                          ></Button>\r\n                        </List.Content>\r\n                        <List.Icon\r\n                          name=\"clock outline\"\r\n                          verticalAlign=\"middle\"\r\n                        />\r\n                        <List.Content>\r\n                          <List.Header>{session.session_name}</List.Header>\r\n                          <List.Description>\r\n                            {timeFormat(session.created_at)}\r\n                          </List.Description>\r\n                        </List.Content>\r\n                      </List.Item>\r\n                    );\r\n                  })\r\n                ) : (\r\n                  <List.Item>\r\n                    <List.Content>No previous sessions</List.Content>\r\n                  </List.Item>\r\n                )}\r\n              </List>\r\n            </Grid.Column>\r\n          </Grid>\r\n          <Divider vertical>Or</Divider>\r\n        </Segment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Start);\r\n","export interface ISessionAccess {\r\n  _id: string;\r\n  session_name: string;\r\n  session_pin: string;\r\n  created_at: number;\r\n}\r\n\r\nconst sessionKey = \"sp_sessions\";\r\n\r\nexport class UserSessionApi {\r\n\r\n}\r\n\r\n\r\nexport class LocalSessionApi {\r\n  static saveSession(session: ISessionAccess) {\r\n    let currentSessions = this.getSessions();\r\n    localStorage.setItem(\r\n      sessionKey,\r\n      JSON.stringify(\r\n        currentSessions?.length ? [...currentSessions, session] : [session]\r\n      )\r\n    );\r\n  }\r\n\r\n  static getSessions(): ISessionAccess[] | null {\r\n    const sessionsString = localStorage.getItem(sessionKey);\r\n    return sessionsString ? JSON.parse(sessionsString) : null;\r\n  }\r\n\r\n  static deleteSession(sessionId: string) {\r\n    let sessions = this.getSessions();\r\n    if (sessions && sessions.length) {\r\n      sessions = sessions.filter((session) => {\r\n        return session._id !== sessionId;\r\n      });\r\n      localStorage.setItem(sessionKey, JSON.stringify(sessions));\r\n    }\r\n  }\r\n\r\n  static getSession(sessionId: string): ISessionAccess | null {\r\n    const sessions = this.getSessions();\r\n    let result: ISessionAccess | null = null;\r\n    if (sessions && sessions.length) {\r\n      result =\r\n        sessions.filter((session) => {\r\n          return session._id === sessionId;\r\n        })[0] || null;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","export const timeFormat = (timestamp: number) => {\r\n    const t = new Date(timestamp); \r\n    return `${t.toLocaleDateString()} - ${t.toLocaleTimeString()}`;\r\n}","export interface IUserInfo {\r\n  id?: string;\r\n  username?: string;\r\n  email?: string;\r\n  pattern?: string;\r\n}\r\n\r\nconst userInfoKey = \"sp_user\";\r\n\r\nexport class LocalUserInfoApi {\r\n  static saveUserInfo(userInfo: IUserInfo) {\r\n    localStorage.setItem(userInfoKey, JSON.stringify(userInfo));\r\n  }\r\n\r\n  static getUserInfo(): IUserInfo | null {\r\n    const userInfoValue = localStorage.getItem(userInfoKey);\r\n\r\n    if (userInfoValue) {\r\n      return JSON.parse(userInfoValue);\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport Gravatar from \"react-gravatar\";\r\n\r\nimport \"./index.scss\";\r\nimport {Dimmer, Loader} from \"semantic-ui-react\";\r\n\r\nexport interface IPokerCardProps {\r\n  className?: string;\r\n  voteValue?: string;\r\n  voterUsername?: string;\r\n  voterEmail?: string;\r\n  side: \"front\" | \"back\";\r\n  loading?: boolean;\r\n  withProfilePic?: boolean;\r\n  voterPattern?: string;\r\n  onSelect?: (value: string) => any;\r\n}\r\n\r\nexport interface IPokerCardState {}\r\n\r\nclass PokerCard extends React.Component<\r\n  IPokerCardProps,\r\n  IPokerCardState\r\n> {\r\n  static defaultProps: { voterPattern: string; };\r\n\r\n  constructor(props: IPokerCardProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  onSelect = () => {\r\n    if (this.props.onSelect) {\r\n      this.props.onSelect(this.props.voteValue);\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    const side =\r\n      this.props.side === \"front\" ? (\r\n        // front\r\n        <div\r\n          className={`componentFront ${this.props.className}`}\r\n          onClick={this.onSelect}\r\n        >\r\n          <div className={\"faceFront\"}>\r\n            <div className={\"content\"}>\r\n              <div className={\"valueFront\"}>{this.props.voteValue}</div>\r\n              {this.props.withProfilePic && (\r\n                <div className={\"labelFront\"}>\r\n                  <Gravatar\r\n                    size={80}\r\n                    className={\"avatar\"}\r\n                    email={this.props.voterEmail}\r\n                  />\r\n                  <div>{this.props.voterUsername}</div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        // back\r\n        <div\r\n          className={`componentBack ${this.props.className}`}\r\n          onClick={this.onSelect}\r\n          style={{backgroundImage: `url('/patterns/${this.props.voterPattern}.png')`}}\r\n        >\r\n          <div className={\"faceBack\"}>\r\n            <div className={\"content\"}>\r\n              {this.props.withProfilePic && (\r\n                <div className={\"labelFront\"}>\r\n                  <Gravatar\r\n                    size={80}\r\n                    className={\"avatar\"}\r\n                    email={this.props.voterEmail}\r\n                  />\r\n                  <div className={\"voterLabel\"}>{this.props.children}</div>\r\n                </div>\r\n              )}\r\n              <Dimmer active={this.props.loading}>\r\n                {this.props.withProfilePic && (\r\n                  <Gravatar\r\n                    size={80}\r\n                    className={\"avatar\"}\r\n                    email={this.props.voterEmail}\r\n                  />\r\n                )}\r\n                <div className={\"voterLabel\"}>{this.props.children}</div>\r\n                <Loader active className=\"fit\" />\r\n              </Dimmer>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    return side;\r\n  }\r\n}\r\n\r\n\r\nPokerCard.defaultProps = {\r\n  voterPattern: \"8126\"\r\n}\r\n\r\nexport default PokerCard;","import * as React from \"react\";\r\nimport {\r\n  Form,\r\n  Dropdown,\r\n  Divider,\r\n  Button,\r\n  Segment,\r\n  DropdownProps,\r\n  Grid,\r\n  Header,\r\n} from \"semantic-ui-react\";\r\nimport {v4 as uuid} from \"uuid\";\r\n\r\nimport {IUserInfo, LocalUserInfoApi} from \"../../services\";\r\nimport PokerCard from \"../poker-card/poker-card\";\r\n\r\nexport interface IDevSignInProps {\r\n  onUserSign: (userInfo: IUserInfo) => any;\r\n}\r\n\r\nexport interface IDevSignInState {\r\n  userInfoForm: IUserInfo;\r\n  userInfo?: IUserInfo;\r\n}\r\n\r\nexport default class DevSignIn extends React.Component<\r\n  IDevSignInProps,\r\n  IDevSignInState\r\n> {\r\n  constructor(props: IDevSignInProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInfoForm: {\r\n        email: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  patternOptions = [\r\n    {\r\n      key: \"1267\",\r\n      text: \"Pink-Yellow\",\r\n      value: \"1267\",\r\n      image: {src: \"/patterns/1267.png\"},\r\n    },\r\n    {\r\n      key: \"2109\",\r\n      text: \"Red-Cream\",\r\n      value: \"2109\",\r\n      image: {src: \"/patterns/2109.png\"},\r\n    },\r\n    {\r\n      key: \"9248\",\r\n      text: \"Blue-Cream\",\r\n      value: \"9248\",\r\n      image: {src: \"/patterns/9248.png\"},\r\n    },\r\n    {\r\n      key: \"10680\",\r\n      text: \"BW-Red\",\r\n      value: \"10680\",\r\n      image: {src: \"/patterns/10680.png\"},\r\n    },\r\n    {\r\n      key: \"18242\",\r\n      text: \"Yellow-Cream\",\r\n      value: \"18242\",\r\n      image: {src: \"/patterns/18242.png\"},\r\n    },\r\n    {\r\n      key: \"8126\",\r\n      text: \"Red-Blue\",\r\n      value: \"8126\",\r\n      image: {src: \"/patterns/8126.png\"},\r\n    },\r\n  ];\r\n\r\n  onUserInfoFormSubmit = () => {\r\n    const userInfo = {\r\n      ...this.state.userInfoForm,\r\n      id: uuid(),\r\n    };\r\n    LocalUserInfoApi.saveUserInfo(userInfo);\r\n    this.props.onUserSign(userInfo);\r\n  };\r\n\r\n  onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const userInfoForm: IUserInfo = {\r\n      ...this.state.userInfoForm,\r\n      ...{[event.currentTarget.name]: event.currentTarget.value},\r\n    };\r\n    this.setState({userInfoForm});\r\n  };\r\n\r\n  onSelectChange = (\r\n    event: React.SyntheticEvent<HTMLElement, Event>,\r\n    data: DropdownProps\r\n  ) => {\r\n    const userInfoForm: IUserInfo = {\r\n      ...this.state.userInfoForm,\r\n      ...{pattern: data.value as string},\r\n    };\r\n\r\n    this.setState({userInfoForm});\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <Segment raised className=\"form-wrapper\">    \r\n        <Grid stackable>\r\n          <Grid.Row verticalAlign=\"middle\">\r\n            <Grid.Column width={10}>\r\n            <Header textAlign=\"center\">Developer Info</Header>\r\n              <Form onSubmit={this.onUserInfoFormSubmit}>\r\n                <Form.Input\r\n                  required\r\n                  fluid\r\n                  value={this.state.userInfoForm.username}\r\n                  icon=\"user outline\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"Username\"\r\n                  onChange={this.onInputChange}\r\n                  name=\"username\"\r\n                />\r\n                <Form.Input\r\n                  fluid\r\n                  value={this.state.userInfoForm.email}\r\n                  icon=\"mail outline\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"Email\"\r\n                  onChange={this.onInputChange}\r\n                  name=\"email\"\r\n                />\r\n                <Form.Field>\r\n                  <Dropdown\r\n                    labeled={true}\r\n                    placeholder=\"Select Card Pattern\"\r\n                    name=\"pattern\"\r\n                    fluid\r\n                    value={this.state.userInfoForm.pattern}\r\n                    selection\r\n                    options={this.patternOptions}\r\n                    onChange={this.onSelectChange}\r\n                  />\r\n                </Form.Field>\r\n                <Divider />\r\n                <Button type=\"submit\" primary>\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}>\r\n              <PokerCard\r\n                side=\"back\"\r\n                voterPattern={this.state.userInfoForm.pattern}\r\n                voterUsername={this.state.userInfoForm.username}\r\n                voterEmail={this.state.userInfoForm.email}\r\n                withProfilePic={true}\r\n              >\r\n                <div>{this.state.userInfoForm.username ?? \"Unknown\"}</div>\r\n              </PokerCard>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport {ApiService} from \"../../api\";\r\nimport {IEstimation} from \"../../api/interfaces\";\r\nimport {Segment} from \"semantic-ui-react\";\r\nimport {IUserInfo} from \"../../services\";\r\nimport PokerCard from \"../poker-card/poker-card\";\r\nimport \"./dev-estimation.scss\";\r\n\r\nexport interface IDevEstimationProps {\r\n  sessionId: string;\r\n  userInfo: IUserInfo;\r\n}\r\n\r\nexport interface IDevEstimationState {\r\n  activeEstimation?: IEstimation;\r\n  sessionName?: string;\r\n  currentSelectedVote?: string;\r\n}\r\n\r\nexport default class DevEstimation extends React.Component<\r\n  IDevEstimationProps,\r\n  IDevEstimationState\r\n> {\r\n  readonly api: ApiService = ApiService.Instance;\r\n  readonly cardValues: string[] = [\r\n    \"0\",\r\n    \"1\",\r\n    \"2\",\r\n    \"3\",\r\n    \"5\",\r\n    \"8\",\r\n    \"13\",\r\n    \"20\",\r\n    \"40\",\r\n    \"?\",\r\n  ];\r\n\r\n  state: IDevEstimationState = {};\r\n\r\n  componentDidMount() {\r\n    this.setActiveEstimation();\r\n    this.api.onChange(this.onActiveEstimationChange);\r\n  }\r\n\r\n  setActiveEstimation() {\r\n    return this.api.getSession(this.props.sessionId).then((result) => {\r\n      const activeEstimation: IEstimation | undefined = Object.keys(\r\n        result.estimations!\r\n      ).reduce((acc, current) => {\r\n        const currentEstimation = result.estimations![current];\r\n        acc = currentEstimation.isActive ? currentEstimation : acc;\r\n        return acc;\r\n      }, undefined as IEstimation | undefined);\r\n\r\n      const currentSelectedVote =\r\n        activeEstimation?.votes?.[this.props.userInfo.id]?.value;\r\n\r\n      this.setState({\r\n        activeEstimation,\r\n        sessionName: result.session_name,\r\n        currentSelectedVote,\r\n      });\r\n    });\r\n  }\r\n\r\n  onActiveEstimationChange = () => {\r\n    this.setActiveEstimation().then(() => {\r\n      if (this.state.activeEstimation) {\r\n        this.api.vote(\r\n          this.props.sessionId,\r\n          this.state.activeEstimation.id,\r\n          this.props.userInfo\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  onCardSelected = (value: string) => {\r\n    this.api.vote(\r\n      this.props.sessionId,\r\n      this.state.activeEstimation.id,\r\n      this.props.userInfo,\r\n      value\r\n    );\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <>\r\n        <Segment.Group>\r\n          <Segment secondary size=\"big\">\r\n            Session: {this.state.sessionName}\r\n          </Segment>\r\n\r\n          {!this.state.activeEstimation && (\r\n            <Segment padded=\"very\" textAlign=\"center\">\r\n              No Active Estimation.\r\n            </Segment>\r\n          )}\r\n        </Segment.Group>\r\n        {this.state.activeEstimation && (\r\n          <Segment.Group>\r\n            <Segment color=\"violet\">\r\n              Estimation Name: {this.state.activeEstimation.name}\r\n            </Segment>\r\n            <Segment secondary>\r\n              Estimation Description: {this.state.activeEstimation.description}\r\n            </Segment>\r\n            <Segment>\r\n              <div className=\"card-wrapper\">\r\n                {this.cardValues.map((value) => {\r\n                  return (\r\n                    <PokerCard\r\n                      onSelect={this.onCardSelected}\r\n                      className={`dev-card ${\r\n                        value === this.state.currentSelectedVote\r\n                          ? \"selected\"\r\n                          : \"\"\r\n                      }`}\r\n                      side=\"front\"\r\n                      voteValue={value}\r\n                      voterUsername={this.props.userInfo.username}\r\n                    ></PokerCard>\r\n                  );\r\n                })}\r\n              </div>\r\n            </Segment>\r\n          </Segment.Group>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport \"./developer.scss\";\r\nimport {IUserInfo, LocalUserInfoApi} from \"../services\";\r\nimport DevSignIn from \"../components/dev-sign-in/dev-sign-in\";\r\nimport DevEstimation from \"../components/dev-estimation/dev-estimation\";\r\nimport {Segment, Loader} from \"semantic-ui-react\";\r\nimport {ApiService} from \"../api\";\r\n\r\nexport interface IDeveloperPageProps extends RouteComponentProps {}\r\n\r\nexport interface IDeveloperPageState {\r\n  userInfo?: IUserInfo;\r\n  sessionValid?: boolean;\r\n  initialLoad?: boolean;\r\n}\r\n\r\nclass DeveloperPage extends React.Component<\r\n  IDeveloperPageProps,\r\n  IDeveloperPageState\r\n> {\r\n  sessionId: string;\r\n\r\n  readonly api: ApiService = ApiService.Instance;\r\n\r\n  constructor(props: IDeveloperPageProps) {\r\n    super(props);\r\n\r\n    const params = new URLSearchParams(this.props.location.search);\r\n    this.sessionId = params.get(\"id\");\r\n    this.state = {userInfo: LocalUserInfoApi.getUserInfo() || undefined};\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.sessionId) {\r\n      this.api\r\n        .getSession(this.sessionId)\r\n        .then((response) => {\r\n          this.setState({sessionValid: true});\r\n        })\r\n        .catch((error) => {\r\n          this.setState({sessionValid: false});\r\n        })\r\n        .finally(() => {\r\n          this.setState({initialLoad: true});\r\n        });\r\n    }\r\n  }\r\n\r\n  onUserSignIn = (userInfo: IUserInfo) => {\r\n    this.setState({userInfo});\r\n  };\r\n\r\n  public render() {\r\n    const main =\r\n      this.sessionId && this.state.sessionValid ? (\r\n        this.state.userInfo ? (\r\n          <DevEstimation userInfo={this.state.userInfo} sessionId={this.sessionId}></DevEstimation>\r\n        ) : (\r\n          <DevSignIn onUserSign={this.onUserSignIn}></DevSignIn>\r\n        )\r\n      ) : (\r\n        <Segment>No session Id</Segment>\r\n      );\r\n\r\n    return (\r\n      <div className=\"developer-page\">\r\n        {this.state.initialLoad && main}\r\n        {!this.state.initialLoad && (\r\n          <Loader inverted active size=\"huge\" content=\"Loading\" />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(DeveloperPage);\r\n","import * as React from \"react\";\r\nimport {Reveal} from \"semantic-ui-react\";\r\nimport PokerCard from \"../poker-card/poker-card\";\r\n\r\nimport style from \"./style.module.scss\";\r\nimport {IVote} from \"../../api/interfaces\";\r\n\r\nexport interface ICardRevealProps {\r\n  shouldHide: boolean;\r\n  withProfilePic?: boolean;\r\n  vote: IVote;\r\n}\r\n\r\nexport default class CardReveal extends React.Component<ICardRevealProps> {\r\n  public render() {\r\n    return (\r\n      <Reveal\r\n        disabled={this.props.shouldHide}\r\n        active={!this.props.shouldHide}\r\n        animated=\"move\"\r\n        style={{pointerEvents: \"none\"}}\r\n        className={style.container}\r\n        instant={this.props.shouldHide}\r\n      >\r\n        <Reveal.Content style={{lineHeight: 0}} visible>\r\n          <PokerCard\r\n            withProfilePic\r\n            side=\"back\"\r\n            loading={!this.props.vote?.value}\r\n            voterEmail={this.props.vote.voter_email}\r\n            voterUsername={this.props.vote.voter_username}\r\n            voterPattern={this.props.vote.pattern}\r\n          >\r\n            <div>{this.props.vote.voter_username}</div>\r\n          </PokerCard>\r\n        </Reveal.Content>\r\n        <Reveal.Content style={{lineHeight: 0}} hidden>\r\n          <PokerCard\r\n            withProfilePic\r\n            side=\"front\"\r\n            voterEmail={this.props.vote.voter_email}\r\n            voterUsername={this.props.vote.voter_username}\r\n            voteValue={this.props.shouldHide ? \"?\" : this.props.vote.value}\r\n          ></PokerCard>\r\n        </Reveal.Content>\r\n      </Reveal>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport {Button, Segment, SegmentGroup} from \"semantic-ui-react\";\r\n\r\nimport \"./votes-table.scss\";\r\nimport {IEstimation} from \"../../api/interfaces\";\r\nimport {ApiService} from \"../../api\";\r\nimport CardReveal from \"../card-reveal/card-reveal\";\r\n\r\nexport interface IVotesTableProps {\r\n  estimate: IEstimation;\r\n  documentRef: {_id: string; _rev: string};\r\n}\r\n\r\nexport interface IVotesTableState {}\r\n\r\nexport default class VotesTable extends React.Component<\r\n  IVotesTableProps,\r\n  IVotesTableState\r\n> {\r\n  readonly api: ApiService = ApiService.Instance;\r\n\r\n  constructor(props: IVotesTableProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  onToggleVoteClick = (event: React.MouseEvent, active: boolean) => {\r\n    const newEstimate: IEstimation = {...this.props.estimate, isActive: active};\r\n    this.api.updateEstimation(this.props.documentRef, newEstimate);\r\n  };\r\n\r\n  onDeleteClick = (e: React.MouseEvent) => {\r\n    this.api.deleteEstimation(this.props.documentRef, this.props.estimate.id!);\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"votes-table\">\r\n        <SegmentGroup>\r\n          <Segment secondary textAlign=\"center\">\r\n            <Button.Group>\r\n              <Button\r\n                circular\r\n                icon=\"play\"\r\n                color={!this.props.estimate.isActive ? \"blue\" : undefined}\r\n                disabled={this.props.estimate.isActive}\r\n                content=\"Start\"\r\n                onClick={(e) => {\r\n                  this.onToggleVoteClick(e, true);\r\n                }}\r\n              />\r\n              <Button\r\n                icon=\"stop\"\r\n                disabled={!this.props.estimate.isActive}\r\n                negative={this.props.estimate.isActive}\r\n                content=\"Stop\"\r\n                onClick={(e) => {\r\n                  this.onToggleVoteClick(e, false);\r\n                }}\r\n              />\r\n              <Button\r\n                disabled={this.props.estimate.isActive}\r\n                icon=\"trash alternate\"\r\n                content=\"Delete\"\r\n                onClick={this.onDeleteClick}\r\n              />\r\n            </Button.Group>\r\n          </Segment>\r\n\r\n          <Segment>\r\n            <div className=\"votes-table__cards\">\r\n              {Object.keys(this.props.estimate.votes).map((voteKey) => {\r\n                return (\r\n                  <CardReveal\r\n                    vote={this.props.estimate.votes[voteKey]}\r\n                    shouldHide={this.props.estimate.isActive}\r\n                  ></CardReveal>\r\n                );\r\n              })}\r\n            </div>\r\n          </Segment>\r\n        </SegmentGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport {Tab} from \"semantic-ui-react\";\r\n\r\nimport {IEstimation} from \"../../api/interfaces\";\r\nimport VotesTable from \"../votes-table/votes-table\";\r\n\r\nimport \"./style.scss\";\r\n\r\nexport interface IEstimationsProps {\r\n  estimations: {[key: string]: IEstimation};\r\n  rev: string;\r\n  id: string;\r\n}\r\n\r\nexport interface IEstimationsState {\r\n  panes?: any;\r\n  initialRender: boolean;\r\n}\r\n\r\nexport default class Estimations extends React.Component<\r\n  IEstimationsProps,\r\n  IEstimationsState\r\n> {\r\n  constructor(props: IEstimationsProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      initialRender: false,\r\n    };\r\n  }\r\n\r\n  mapEstimationsToPanes = () => {\r\n    return Object.keys(this.props.estimations)\r\n      .sort((a, b) => {\r\n        return this.props.estimations[a].timestamp <\r\n          this.props.estimations[b].timestamp\r\n          ? 1\r\n          : -1;\r\n      })\r\n      .map((estimationKeys, index) => {\r\n        return {\r\n          menuItem: this.props.estimations[estimationKeys].isActive\r\n            ? `${this.props.estimations[estimationKeys].name} - Active`\r\n            : this.props.estimations[estimationKeys].name,\r\n          render: () => (\r\n            <Tab.Pane className=\"tab-container\">\r\n              <VotesTable\r\n                documentRef={{_rev: this.props.rev, _id: this.props.id}}\r\n                estimate={this.props.estimations[estimationKeys]}\r\n              ></VotesTable>\r\n            </Tab.Pane>\r\n          ),\r\n        };\r\n      });\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Tab\r\n        menu={{ pointing: true, fluid: true, vertical: true }}\r\n        panes={this.mapEstimationsToPanes()}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {ISessionDb} from \"../api/interfaces\";\r\nimport {ApiService} from \"../api\";\r\nimport {Button, Segment, Form, Icon} from \"semantic-ui-react\";\r\nimport {toast, ToastContainer} from \"react-toastify\";\r\n\r\nimport \"./po-page.scss\";\r\nimport Estimations from \"../components/estimations/estimations\";\r\n\r\ninterface IEstimationForm {\r\n  estimation_name: string;\r\n  estimation_description: string;\r\n}\r\n\r\nexport interface IPoPageProps extends RouteComponentProps {}\r\n\r\nexport interface IPoPageState {\r\n  session?: PouchDB.Core.Document<ISessionDb> & PouchDB.Core.GetMeta;\r\n  estimationForm?: Partial<IEstimationForm>;\r\n}\r\n\r\nclass PoPage extends React.Component<IPoPageProps, IPoPageState> {\r\n  readonly api: ApiService = ApiService.Instance;\r\n  sessionId: string | null;\r\n\r\n  constructor(props: IPoPageProps) {\r\n    super(props);\r\n\r\n    const params = new URLSearchParams(this.props.location.search);\r\n    this.sessionId = params.get(\"id\");\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.sessionId) {\r\n      this.getSession();\r\n      this.api.onChange(this.getSession);\r\n    } else {\r\n      // redirect him\r\n    }\r\n  }\r\n\r\n  getSession = () => {\r\n    this.api.getSession(this.sessionId!).then((session) => {\r\n      this.setState({session: session});\r\n    });\r\n  };\r\n\r\n  onEstimationFormInputChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const estimationForm = {\r\n      ...this.state.estimationForm,\r\n      ...{[event.currentTarget.name]: event.currentTarget.value},\r\n    };\r\n\r\n    this.setState({estimationForm});\r\n  };\r\n\r\n  onEstimationFormSubmit = (form?: Partial<IEstimationForm>) => {\r\n    if (form && form.estimation_name) {\r\n      this.api.createNewEstimation(this.state.session!, {\r\n        name: form.estimation_name,\r\n        description: form.estimation_description,\r\n        timestamp: new Date().getTime(),\r\n        isActive: false,\r\n        isEnded: false,\r\n        votes: {},\r\n      });\r\n    }\r\n  };\r\n\r\n  onCopyButtonClick = () => {\r\n    const devSessionUrl = `${window.location.origin}/dev?id=${this.sessionId}`;\r\n    navigator.clipboard.writeText(devSessionUrl);\r\n    toast.success(\"Dev url Copied!\", {\r\n      position: toast.POSITION.BOTTOM_RIGHT,\r\n    });\r\n  };\r\n\r\n  public render() {\r\n    const hasEstimations: boolean =\r\n      this.state.session?.estimations &&\r\n      !!Object.keys(this.state.session?.estimations).length;\r\n    const estimationsComponent = hasEstimations ? (\r\n      <Estimations\r\n        rev={this.state.session._rev}\r\n        id={this.state.session._id}\r\n        estimations={this.state.session?.estimations}\r\n      ></Estimations>\r\n    ) : (\r\n      <h4> No Estimations</h4>\r\n    );\r\n\r\n    return (\r\n      <div id=\"po-page\">\r\n        <Segment.Group>\r\n          <Segment secondary clearing className=\"session-header\">\r\n            Session name: {this.state.session?.session_name}\r\n            <Button\r\n              onClick={this.onCopyButtonClick}\r\n              color=\"blue\"\r\n              size=\"mini\"\r\n              floated=\"right\"\r\n              inverted\r\n            >\r\n              <Icon name=\"share alternate\" />\r\n              Copy Invitation Link\r\n            </Button>\r\n          </Segment>\r\n          <Segment>\r\n            <Form\r\n              onSubmit={(event) => {\r\n                this.onEstimationFormSubmit(this.state.estimationForm);\r\n              }}\r\n            >\r\n              <Form.Field>\r\n                <input\r\n                  name=\"estimation_name\"\r\n                  placeholder=\"Estimation Name\"\r\n                  onChange={this.onEstimationFormInputChange}\r\n                  value={this.state.estimationForm?.estimation_name}\r\n                />\r\n              </Form.Field>\r\n              <Form.Field>\r\n                <input\r\n                  name=\"estimation_description\"\r\n                  placeholder=\"Estimation Description\"\r\n                  onChange={this.onEstimationFormInputChange}\r\n                  value={this.state.estimationForm?.estimation_description}\r\n                />\r\n              </Form.Field>\r\n              <Button floated=\"right\" type=\"submit\">\r\n                New\r\n              </Button>\r\n            </Form>\r\n          </Segment>\r\n        </Segment.Group>\r\n        <Segment.Group className=\"estimation-container\">\r\n          <Segment textAlign=\"center\">{estimationsComponent}</Segment>\r\n        </Segment.Group>\r\n        <ToastContainer autoClose={3000} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(PoPage);\r\n","import React from \"react\";\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\n\nimport StartPage from \"./pages/start\";\nimport DeveloperPage from  \"./pages/developer\";\nimport PoPage from  \"./pages/po-page\";\nimport \"./App.css\";\n\ndeclare let particlesJS: any\n\nparticlesJS.load('particles-js', \"particlesjs-config.json\", () => {\n  console.log('callback - particles.js config loaded');\n});\n\nfunction App() {\n\n  const baseName = process.env.NODE_ENV === \"production\" ? \"/block-1\" : \"/\";\n\n  return (\n    <BrowserRouter basename={baseName}>\n      {/* Sharable across the pages */}\n      <div id=\"particles-js\"></div>\n      <Switch>\n        <Route path=\"/dev\">\n          <DeveloperPage/>\n        </Route>\n        <Route path=\"/po\">\n          <PoPage/>\n        </Route>\n        <Route path=\"/\">\n          <StartPage/>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"particles.js\";\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}